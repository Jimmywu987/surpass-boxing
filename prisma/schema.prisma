generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider     = "mysql"
  // url          = env("DATABASE_URL")
  provider     = "postgresql"
  url          = env("POSTGRES_PRISMA_URL")
  directUrl    = env("POSTGRES_URL_NON_POOLING")
  relationMode = "prisma"
}

enum UserStatusEnum {
  ACTIVE
  DELETED
}

enum UserAuthOptionsEnum {
  GOOGLE
  CREDENTIAL
}

enum BookingTimeSlotStatusEnum {
  CONFIRM
  PENDING
  CANCELED
}

enum ClassLevelEnum {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LanguageEnum {
  EN
  ZH
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password    String
  email       String  @unique
  username    String
  profileImg  String
  phoneNumber String
  admin       Boolean @default(false)
  shouldShow  Boolean @default(false)

  authOption UserAuthOptionsEnum
  status     UserStatusEnum      @default(ACTIVE)

  lang LanguageEnum

  lessons                    Lessons[]
  userOnBookingTimeSlots     UserOnBookingTimeSlots[]
  regularBookingTimeSlots    RegularBookingTimeSlots[]
  notifications              Notification[]
  bookingTimeSlots           BookingTimeSlots[]
  classLevelDifferentRecords ClassLevelDifferentRecord[]
  coachInfos                 CoachInfos[]
}

model Lessons {
  id         String         @id @default(cuid())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  startDate  DateTime
  expiryDate DateTime
  lesson     Int
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  level      ClassLevelEnum

  @@index([userId])
}

model ClassesType {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  level ClassLevelEnum
}

model RegularBookingTimeSlots {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  monday               Boolean
  tuesday              Boolean
  wednesday            Boolean
  thursday             Boolean
  friday               Boolean
  saturday             Boolean
  sunday               Boolean
  startTime            Int
  endTime              Int
  coachId              String
  coach                User    @relation(fields: [coachId], references: [id], onDelete: Cascade)
  numberOfParticipants Int?

  className String
  level     ClassLevelEnum

  @@index([coachId])
}

model BookingTimeSlots {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  date                 DateTime
  startTime            Int
  endTime              Int
  status               BookingTimeSlotStatusEnum @default(PENDING)
  numberOfParticipants Int?

  regularBookingTimeSlotId String?

  className String
  level     ClassLevelEnum

  coachId String?
  coach   User?   @relation(fields: [coachId], references: [id], onDelete: Cascade)

  userOnBookingTimeSlots UserOnBookingTimeSlots[]

  @@index([coachId])
}

model UserOnBookingTimeSlots {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  bookingTimeSlots  BookingTimeSlots @relation(fields: [bookingTimeSlotId], references: [id])
  bookingTimeSlotId String

  createdAt DateTime @default(now())

  @@id([userId, bookingTimeSlotId])
  @@index([bookingTimeSlotId])
  @@index([userId])
}

model News {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  content Json?
  img     String
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  message String
  url     String?

  adminId String?
  user    User?   @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
}

model ClassLevelDifferentRecord {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  levelFrom ClassLevelEnum
  levelTo   ClassLevelEnum

  bookingTimeSlotId String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model OffDay {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reason String?
  date   DateTime
}

model CoachInfos {
  id String @id @default(cuid())

  enTitle String?
  zhTitle String

  coachId String
  coach   User   @relation(fields: [coachId], references: [id], onDelete: Cascade)

  @@index([coachId])
}
